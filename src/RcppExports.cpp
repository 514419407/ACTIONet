// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/ACTIONet.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// reduceGeneExpression
List reduceGeneExpression(sp_mat expression, int reduced_dim, int method, int iters);
RcppExport SEXP _ACTIONet_reduceGeneExpression(SEXP expressionSEXP, SEXP reduced_dimSEXP, SEXP methodSEXP, SEXP itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< sp_mat >::type expression(expressionSEXP);
    Rcpp::traits::input_parameter< int >::type reduced_dim(reduced_dimSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    rcpp_result_gen = Rcpp::wrap(reduceGeneExpression(expression, reduced_dim, method, iters));
    return rcpp_result_gen;
END_RCPP
}
// runsimplexRegression
mat runsimplexRegression(mat A, mat B);
RcppExport SEXP _ACTIONet_runsimplexRegression(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(runsimplexRegression(A, B));
    return rcpp_result_gen;
END_RCPP
}
// runSPA
mat runSPA(mat A, int k);
RcppExport SEXP _ACTIONet_runSPA(SEXP ASEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(runSPA(A, k));
    return rcpp_result_gen;
END_RCPP
}
// runAA
List runAA(mat A, mat W0);
RcppExport SEXP _ACTIONet_runAA(SEXP ASEXP, SEXP W0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< mat >::type W0(W0SEXP);
    rcpp_result_gen = Rcpp::wrap(runAA(A, W0));
    return rcpp_result_gen;
END_RCPP
}
// runACTION
List runACTION(mat S_r, int k_min, int k_max, int thread_no);
RcppExport SEXP _ACTIONet_runACTION(SEXP S_rSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type S_r(S_rSEXP);
    Rcpp::traits::input_parameter< int >::type k_min(k_minSEXP);
    Rcpp::traits::input_parameter< int >::type k_max(k_maxSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(runACTION(S_r, k_min, k_max, thread_no));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ACTIONet_reduceGeneExpression", (DL_FUNC) &_ACTIONet_reduceGeneExpression, 4},
    {"_ACTIONet_runsimplexRegression", (DL_FUNC) &_ACTIONet_runsimplexRegression, 2},
    {"_ACTIONet_runSPA", (DL_FUNC) &_ACTIONet_runSPA, 2},
    {"_ACTIONet_runAA", (DL_FUNC) &_ACTIONet_runAA, 2},
    {"_ACTIONet_runACTION", (DL_FUNC) &_ACTIONet_runACTION, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_ACTIONet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
